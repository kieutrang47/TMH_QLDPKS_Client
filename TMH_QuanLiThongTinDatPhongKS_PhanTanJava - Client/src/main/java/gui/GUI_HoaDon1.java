/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.io.Serializable;
import java.rmi.Naming;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.*;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import client.RMIClient;

import dto.HoaDonDTO;
import entity.HoaDon;
import rmi.HoaDonService;

/**
 *
 * @author lehoann
 */
public class GUI_HoaDon1 extends javax.swing.JPanel {

    private DefaultTableModel tableModel;
	private JTable jTable;
    private RMIClient rmiClient;
    private HoaDonService hoaDonService;
    private HoaDon hoaDon= new HoaDon();
	/**
     * Creates new form GUI_HoaDon1
     */
    public GUI_HoaDon1() {

        try {
            rmiClient = new RMIClient();
            hoaDonService = rmiClient.getHoaDonService();
            System.out.println("Connected to RMI server successfully!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error connecting to RMI server: " + e.getMessage(),
                    "Connection Error", JOptionPane.ERROR_MESSAGE);
        }
     	System.out.println("Connected !!!");
        initComponents();
        setupTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pN = new javax.swing.JPanel();
        lblTenKS = new javax.swing.JLabel();
        IconAcc = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        pS = new javax.swing.JPanel();
        btnXem = new com.k33ptoo.components.KButton();
        pC = new javax.swing.JPanel();
        b1 = new javax.swing.JPanel();
        lblTieuDe = new javax.swing.JLabel();
        DateTu = new com.toedter.calendar.JDateChooser();
        DateDen = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblTg = new javax.swing.JLabel();
        txtTim = new javax.swing.JTextField();
        btnTim = new javax.swing.JButton();
        btnTim1 = new javax.swing.JButton();
        b2 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pN.setBackground(new java.awt.Color(255, 255, 255));

        lblTenKS.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblTenKS.setText("The Moon Hotel 2");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setText("Tên NV");

        javax.swing.GroupLayout pNLayout = new javax.swing.GroupLayout(pN);
        pN.setLayout(pNLayout);
        pNLayout.setHorizontalGroup(
            pNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblTenKS)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 583, Short.MAX_VALUE)
                .addComponent(IconAcc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
        );
        pNLayout.setVerticalGroup(
            pNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pNLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IconAcc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTenKS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        add(pN, java.awt.BorderLayout.PAGE_START);

        pS.setBackground(new java.awt.Color(255, 255, 255));

        btnXem.setBackground(new java.awt.Color(51, 102, 255));
        btnXem.setForeground(new java.awt.Color(0, 0, 0));
        btnXem.setText("Xem chi tiết");
        btnXem.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnXem.setkBorderRadius(20);
        btnXem.setkEndColor(new java.awt.Color(255, 255, 255));
        btnXem.setkForeGround(new java.awt.Color(0, 0, 0));
        btnXem.setkHoverEndColor(new java.awt.Color(153, 204, 255));
        btnXem.setkHoverForeGround(new java.awt.Color(0, 0, 0));
        btnXem.setkHoverStartColor(new java.awt.Color(204, 204, 204));
        btnXem.setkSelectedColor(new java.awt.Color(204, 204, 204));
        btnXem.setkStartColor(new java.awt.Color(102, 153, 255));
        btnXem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnXemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pSLayout = new javax.swing.GroupLayout(pS);
        pS.setLayout(pSLayout);
        pSLayout.setHorizontalGroup(
            pSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSLayout.createSequentialGroup()
                .addContainerGap(888, Short.MAX_VALUE)
                .addComponent(btnXem, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        pSLayout.setVerticalGroup(
            pSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnXem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        add(pS, java.awt.BorderLayout.PAGE_END);

        pC.setLayout(new javax.swing.BoxLayout(pC, javax.swing.BoxLayout.Y_AXIS));

        b1.setBackground(new java.awt.Color(204, 204, 204));
        b1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 10, true));

        lblTieuDe.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        lblTieuDe.setText("Quản lý hoá đơn");

        DateTu.setDateFormatString("dd/MM/yyyy");

        DateDen.setDateFormatString("dd/MM/yyyy");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel2.setText("Từ");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel3.setText("đến");

        lblTg.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        lblTg.setText("Thời gian: ");

        txtTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimActionPerformed(evt);
            }
        });

        btnTim.setIcon(new javax.swing.ImageIcon( getClass().getResource("/icon/tabCustom/find.png"))); // NOI18N
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnTimActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnTim1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/tabCustom/find.png"))); // NOI18N
        btnTim1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTim1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout b1Layout = new javax.swing.GroupLayout(b1);
        b1.setLayout(b1Layout);
        b1Layout.setHorizontalGroup(
            b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(b1Layout.createSequentialGroup()
                .addGroup(b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(b1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTieuDe, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(b1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblTg)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(DateTu, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DateDen, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTim1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnTim, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        b1Layout.setVerticalGroup(
            b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(b1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(b1Layout.createSequentialGroup()
                        .addComponent(lblTieuDe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addGroup(b1Layout.createSequentialGroup()
                                    .addGroup(b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblTg)
                                        .addComponent(jLabel2))
                                    .addGap(2, 2, 2)))
                            .addComponent(DateTu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DateDen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, b1Layout.createSequentialGroup()
                        .addGroup(b1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnTim, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTim, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        pC.add(b1);

        javax.swing.GroupLayout b2Layout = new javax.swing.GroupLayout(b2);
        b2.setLayout(b2Layout);
        b2Layout.setHorizontalGroup(
            b2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1034, Short.MAX_VALUE)
        );
        b2Layout.setVerticalGroup(
            b2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );

        pC.add(b2);

        add(pC, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Phương thức xử lý sự kiện khi bấm nút tìm kiếm
    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {
        String keyword = txtTim.getText().trim();
        System.out.println("GUI: Keyword tìm kiếm: [" + keyword + "]");

        try {
            if (rmiClient == null) {
                System.out.println("GUI: Reconnect RMI");
                reconnectRMI();
            }

            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<List<HoaDonDTO>> future = executor.submit(() -> {
                System.out.println("GUI: Gọi client.timKiemHoaDonTheoTuKhoa");
                return rmiClient.timKiemHoaDonTheoTuKhoa(keyword);  // Đảm bảo client trả về List<HoaDonDTO>
            });

            List<HoaDonDTO> hoaDonList;
            try {
                hoaDonList = future.get(180, TimeUnit.SECONDS);
                System.out.println("GUI: Nhận được " + (hoaDonList != null ? hoaDonList.size() : 0) + " kết quả");
                if (hoaDonList == null || hoaDonList.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy hóa đơn nào.");
                    hoaDonList = new ArrayList<>();
                }
                hienThiKetQuaTimKiem1(hoaDonList);  // Chuyển qua hàm xử lý List<HoaDonDTO>
            } catch (TimeoutException e) {
                System.err.println("GUI: Timeout khi chờ kết quả: " + e.getMessage());
                future.cancel(true);
                JOptionPane.showMessageDialog(this, "Thời gian chờ quá lâu. Vui lòng thử lại.");
                hienThiKetQuaTimKiem(new ArrayList<>());
            } catch (Exception e) {
                System.err.println("GUI: Lỗi khi gọi timKiemHoaDonTheoTuKhoa: " + e.getMessage());
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm hóa đơn: " + e.getMessage());
                hienThiKetQuaTimKiem(new ArrayList<>());
            } finally {
                executor.shutdownNow();
            }
        } catch (Exception e) {
            System.err.println("GUI: Lỗi kết nối RMI: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Không kết nối được server. Vui lòng thử lại.");
        }
    }



    // Hàm kết nối lại RMI
    private void reconnectRMI() {
        try {
            // Thay thế bằng code kết nối RMI của bạn
            rmiClient = (RMIClient) Naming.lookup("rmi://localhost:1099/HoaDonService");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Không thể kết nối tới RMI Server");
        }
    }



    private void txtTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimActionPerformed
        // TODO add your handling code here:
    	
    }//GEN-LAST:event_txtTimActionPerformed

    private void btnTim1ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            LocalDate fromDate = DateTu.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate toDate = DateDen.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            System.out.println("From: " + fromDate + " -> To: " + toDate);

            List<HoaDonDTO> hoaDonList = rmiClient.timKiemHoaDonTheoNgay(fromDate, toDate);
            hienThiKetQuaTimKiem(hoaDonList);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tìm hóa đơn theo ngày: " + e.getMessage());
        }
    }




    private void btnXemActionPerformed(java.awt.event.ActionEvent evt) {
		
            int row = jTable.getSelectedRow();
            if (row != -1) {
                String maHoaDon = (String) jTable.getValueAt(row, 0);
                hienThiThongTinHoaDon(maHoaDon);
            } else {
                JOptionPane.showMessageDialog(null, "Vui lòng chọn một hóa đơn để xem chi tiết.");
            }
        }


    private void hienThiThongTinHoaDon(String maHoaDon) {
        FormThongTinHoaDon thongTinHoaDon = new FormThongTinHoaDon();
        thongTinHoaDon.setVisible(true);
        thongTinHoaDon.setLocationRelativeTo(null);
        thongTinHoaDon.setResizable(false);
        thongTinHoaDon.loadData(maHoaDon);
    }
    private void setupTable() {
        // Khởi tạo model cho JTable
        String[] columnNames = {"Mã Hóa Đơn", "Ngày Lập Hóa Đơn", "Thuế", "Nhân Viên", "Khách Hàng","Phiếu đặt"};
        tableModel = new DefaultTableModel(columnNames, 0);
        jTable = new JTable(tableModel);
        
        // Đặt JTable vào JScrollPane
        JScrollPane scrollPane = new JScrollPane(jTable);
        // Thêm scrollPane vào pKQ (Panel chứa kết quả)
        b2.setLayout(new BorderLayout());
        b2.add(scrollPane, BorderLayout.CENTER);
     
    }

//    private void hienThiThongTinHoaDon(String maHoaDon) {
//        try {
//            Map<String, Object> data = rmiClient.loadThongTinHoaDon(maHoaDon);
//            if (data != null) {
//                FormThongTinHoaDon thongTinHoaDon = new FormThongTinHoaDon();
//                thongTinHoaDon.setVisible(true);
//                thongTinHoaDon.setLocationRelativeTo(null);
//                thongTinHoaDon.setResizable(false);
//
//                thongTinHoaDon.loadDataFromMap(data);
//            } else {
//                JOptionPane.showMessageDialog(this, "Không tìm thấy thông tin hóa đơn.");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(this, "Lỗi khi lấy thông tin hóa đơn: " + e.getMessage());
//        }
//    }
private void hienThiKetQuaTimKiem1(List<HoaDonDTO> hoaDonList) {
    tableModel.setRowCount(0);

    for (HoaDonDTO hoaDon : hoaDonList) {
        Object[] row = {
                hoaDon.getMaHoaDon(),
                hoaDon.getNgayLapHoaDon(),
                hoaDon.getThue(),
                hoaDon.getTenNhanVien(), // thay vì getMaNhanVien()
                hoaDon.getTenKhachHang(), // thay vì getMaKhachHang()
                hoaDon.getMaPhieuDat()
        };

        tableModel.addRow(row);
    }

    JOptionPane.showMessageDialog(this, "Tìm thấy " + hoaDonList.size() + " hóa đơn");
    System.out.println("Số lượng hóa đơn tìm thấy: " + hoaDonList.size());

    b2.revalidate();
    b2.repaint();
}
    private void hienThiKetQuaTimKiem(List<HoaDonDTO> hoaDonList) {
        tableModel.setRowCount(0);

        for (HoaDonDTO hoaDon : hoaDonList) {
            Object[] row = {
                    hoaDon.getMaHoaDon(),
                    hoaDon.getNgayLapHoaDon(),
                    hoaDon.getThue(),
                    hoaDon.getTenNhanVien(), // thay vì getMaNhanVien()
                    hoaDon.getTenKhachHang(), // thay vì getMaKhachHang()
                    hoaDon.getMaPhieuDat()
            };

            tableModel.addRow(row);
        }

        JOptionPane.showMessageDialog(this, "Tìm thấy " + hoaDonList.size() + " hóa đơn");
        System.out.println("Số lượng hóa đơn tìm thấy: " + hoaDonList.size());

        b2.revalidate();
        b2.repaint();
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateDen;
    private com.toedter.calendar.JDateChooser DateTu;
    private javax.swing.JLabel IconAcc;
    private javax.swing.JPanel b1;
    private javax.swing.JPanel b2;
    private javax.swing.JButton btnTim;
    private javax.swing.JButton btnTim1;
    private com.k33ptoo.components.KButton btnXem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblTenKS;
    private javax.swing.JLabel lblTg;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JPanel pC;
    private javax.swing.JPanel pN;
    private javax.swing.JPanel pS;
    private javax.swing.JTextField txtTim;
    // End of variables declaration//GEN-END:variables
}
